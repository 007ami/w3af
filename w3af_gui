#!/usr/bin/env python

import getopt, sys, os
import gettext

# First of all, we need to change the working directory to the directory of w3af.
current_dir = os.getcwd()
script_dir = os.path.dirname(sys.argv[0]) or '.'
os.chdir( script_dir )

def back_to_current_dir():
    os.chdir( current_dir )

# Translation stuff
gettext.install('w3af', 'locales/')

# Make sure that the output manager is started before doing anything else, since
# it is used by most w3af modules 
import core.controllers.outputManager as om
try:
    om.out.set_output_plugins( ['console'] )
except Exception, e:
    print 'Something went wrong, w3af failed to start the output manager.'
    print 'Exception: "%s"' % e
    sys.exit(-9)

usage_doc = '''
w3af - Web Application Attack and Audit Framework

Usage:

    ./w3af_gui [OPTIONS]

Options:

    -h or --help
        Display this help message.

    -n or --no-update
        No update check will be made when starting. This option takes 
        precedence over the 'auto-update' setting in 'startup.conf' file.
     
    -f or --force-update
        An update check will be made when starting. This option takes 
        precedence over the 'auto-update' setting in 'startup.conf' file.
    
    -p <profile> or --profile=<profile>
        Run with the selected <profile>

For more info visit http://w3af.sourceforge.net/
'''    

def usage():
    om.out.information(usage_doc)

def main():
    try:
        long_options = ['help', 'no-update', 'force-update', 'profile=']
        opts, _ = getopt.getopt(sys.argv[1:], "ehnfp:", long_options)
    except getopt.GetoptError:
        # print help information and exit:
        usage()
        return -3
    profile = None
    doupdate = None
    for o, a in opts:
        if o in ( "-e"  ):
            # easter egg
            import base64
            msg = 'R3JhY2lhcyBFdWdlIHBvciBiYW5jYXJtZSB0YW50YXMgaG9yYXMgZGUgZGV'
            msg += 'zYXJyb2xsbywgdGUgYW1vIGdvcmRhIQ=='
            om.out.information( base64.b64decode( msg ) )
        if o == "-s":
            scriptFile = a
        if o in ('-p', '--profile'):
            # selected profile
            profile = a
        if o == "-h":
            usage()
            return 0
        if o in ('-f', '--force-update'):
            doupdate = True
        elif o in ('-n', '--no-update'):
            doupdate = False
    

    # go with GTK, but first check about DISPLAY environment variable
    if sys.platform != "win32":
        display = os.getenv("DISPLAY")
        if not display:
            om.out.error("The DISPLAY environment variable is not set! You can not use any graphical program without it...")
            return -1
    import core.ui.gui.main
    core.ui.gui.main.main(profile, doupdate)

if __name__ == "__main__":
    err_code = main()
    back_to_current_dir()
    sys.exit(err_code)

