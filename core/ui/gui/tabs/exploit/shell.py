'''
shell.py

Copyright 2007 Andres Riancho

This file is part of w3af, http://w3af.org/ .

w3af is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 2 of the License.

w3af is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with w3af; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
'''
import shlex
import gtk
import gobject

import core.data.kb.knowledge_base as kb
import core.controllers.output_manager as om

from core.ui.gui import prompt
from core.controllers.exceptions import w3afException
from core.data.kb.shell import Shell


class Shells(gtk.TreeView):
    '''The list of shells produced from vulnerabilities.

    :author: Facundo Batista <facundobatista =at= taniquetil.com.ar>
    '''
    def __init__(self, w3af):
        self.w3af = w3af

        # create the ListStore, with the shell name and id
        self.liststore = gtk.ListStore(str, str)
        self.listholder = {}

        # create the TreeView using liststore
        super(Shells, self).__init__(self.liststore)

        # create a TreeViewColumn for the text
        tvcolumn = gtk.TreeViewColumn('Shells')
        cell = gtk.CellRendererText()
        tvcolumn.pack_start(cell, True)
        tvcolumn.add_attribute(cell, 'text', 0)
        self.append_column(tvcolumn)

        self.connect('row-activated', self.use_shell)
        kb.kb.add_types_observer(Shell, self._update)
        self.show()

    def _update(self, location_a, location_b, shell_inst):
        '''
        Updates the list of shells.
        '''
        shell_id = str(id(shell_inst))
        self.listholder[shell_id] = shell_inst
        gobject.idle_add(self._update_gui, shell_inst, shell_id)

    def _update_gui(self, shell_inst, shell_id):
        self.liststore.append([str(shell_inst), shell_id])

    def use_shell(self, treeview, path, view_column):
        '''Raises a prompt dialog to use the shell.'''
        shellid = self.liststore[path][1]
        shell = self.listholder[shellid]
        try:
            title = "Shell - " + shell.get_remote_system()
        except w3afException, w3:
            msg = _("Failed to get the remote system name from the shell object.\n")
            msg += _("Original exception: ") + str(w3)
            dlg = gtk.MessageDialog(None, gtk.DIALOG_MODAL,
                                    gtk.MESSAGE_WARNING, gtk.BUTTONS_OK, msg)
            dlg.destroy()
        else:
            def parse_input_run_command(user_input):
                try:
                    parsed_command = shlex.split(user_input)
                except ValueError, ve:
                    om.out.console('%s' % ve)
                else:
                    command = parsed_command[0]
                    params = parsed_command[1:]
                shell.generic_user_input(command, params)

            promptText = shell.get_remote_user(
            ) + '@' + shell.get_remote_system_name()
            prompt.PromptDialog(title, promptText, parse_input_run_command)

