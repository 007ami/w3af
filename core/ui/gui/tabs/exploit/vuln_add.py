'''
vuln_add.py

Copyright 2013 Andres Riancho

This file is part of w3af, http://w3af.org/ .

w3af is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 2 of the License.

w3af is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with w3af; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

'''
import gtk

from core.data.kb.vuln_templates.utils import (get_template_names,
                                               get_template_long_names,
                                               get_template_by_name)
from core.ui.gui.pluginconfig import ConfigPanel


class VulnAddDialog(gtk.Dialog):
    '''Ask for vulnerability information and store the new vuln in the KB

    :author: Andres Riancho
    '''
    def __init__(self, w3af):
        super(VulnAddDialog, self).__init__("Add new vulnerability", None,
                                            gtk.DIALOG_MODAL,
                                            (gtk.STOCK_CANCEL,
                                             gtk.RESPONSE_CANCEL,
                                             gtk.STOCK_ADD,
                                             gtk.RESPONSE_OK))
        
        '''
        template_cfg = ConfigPanel()
        template_cfg.config(self, exploit, longdesc)
        '''
        template_long_names = get_template_long_names()
        template_names = get_template_long_names()

        # A list store with the following columns:
        #    * Long template name (show)
        #    * Template name (code internals)
        liststore = gtk.ListStore(str, str)
        combobox = gtk.ComboBox(liststore)
        cell = gtk.CellRendererText()
        combobox.pack_start(cell, True)
        combobox.add_attribute(cell, 'text', 0)
        
        for i, long_name in enumerate(template_long_names):
            liststore.append((long_name, template_names[i]))
        
        self.vbox.pack_start(combobox)
        
        # the Cancel button
        but = self.action_area.get_children()[1]
        but.connect("clicked", lambda x: self.destroy())
        self.connect("delete-event", lambda x, y: self.destroy())
        
        # the Ok button
        but = self.action_area.get_children()[0]
        but.connect("clicked", self._ok)
        
        self.show_all()

    def _ok(self, w):
        '''Collects the information and stores it in KB'''
        print 'A!'
        self.destroy()
