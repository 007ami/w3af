'''
detect_transparent_proxy.py

Copyright 2006 Andres Riancho

This file is part of w3af, w3af.sourceforge.net .

w3af is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 2 of the License.

w3af is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with w3af; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

'''
import socket

import core.controllers.outputManager as om
import core.data.kb.knowledgeBase as kb
import core.data.kb.info as info

from core.data.options.option import option
from core.data.options.option_list import OptionList
from core.controllers.plugins.infrastructure_plugin import InfrastructurePlugin
from core.controllers.w3afException import w3afRunOnce
from core.controllers.misc.decorators import runonce


class detect_transparent_proxy(InfrastructurePlugin):
    '''
    Find out if your ISP has a transparent proxy installed.
    @author: Andres Riancho (andres.riancho@gmail.com)
    '''
    
    def __init__(self):
        InfrastructurePlugin.__init__(self)

    @runonce(exc_class=w3afRunOnce)        
    def discover(self, fuzzable_request ):
        '''
        @parameter fuzzable_request: A fuzzable_request instance that contains
                                    (among other things) the URL to test.
        '''
        if self._is_proxyed_conn( fuzzable_request ):
            i = info.info()
            i.setPluginName(self.getName())
            i.setName( 'Transparent proxy detected' )
            i.setURL( fuzzable_request.getURL() )
            msg = 'Your ISP seems to have a transparent proxy installed, this can influence'
            msg += ' w3af results.'
            i.setDesc( msg )
            kb.kb.append( self, 'detect_transparent_proxy', i )
            om.out.information( i.getDesc() )
        else:
            om.out.information( 'Your ISP has no transparent proxy.' )
        
    def _is_proxyed_conn( self, fuzzable_request ):
        '''
        Make a connection to a "random" IP to port 80 and make a request for the
        URL we are interested in.
        
        @return: True if proxy is present.
        '''
        random_ips = [ '1.2.3.4', '5.6.7.8', '9.8.7.6', '1.2.1.2', '1.0.0.1',
                       '60.60.60.60', '44.44.44.44', '11.22.33.44', '11.22.33.11',
                       '7.99.7.99', '87.78.87.78']
        
        for ip_address in random_ips:
            sock_obj = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            try:
                sock_obj.connect( ( ip_address , 80) )
            except:
                return False
            else:
                continue
                
        return True

    def get_options( self ):
        '''
        @return: A list of option objects for this plugin.
        '''    
        ol = OptionList()
        return ol

    def set_options( self, OptionList ):
        '''
        This method sets all the options that are configured using the user interface 
        generated by the framework using the result of get_options().
        
        @parameter OptionList: A dictionary with the options for the plugin.
        @return: No value is returned.
        ''' 
        pass
        
    def get_plugin_deps( self ):
        '''
        @return: A list with the names of the plugins that should be run before the
        current one.
        '''
        return []

    def get_long_desc( self ):
        '''
        @return: A DETAILED description of the plugin functions and features.
        '''
        return '''
        This plugin tries to detect transparent proxies.
        
        The procedure for detecting transparent proxies is simple, I try to connect
        to a series of IP addresses, to the port 80, if all of them return an opened
        socket, then it's the proxy server responding.
        '''
