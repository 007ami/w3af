#!/usr/bin/env python

import subprocess
import argparse
import json
import time
import sys
import os

ROOT_PATH = os.path.dirname(os.path.realpath(__file__))
DOCKER_RUN = 'docker run -d -v ~/.w3af:/root/.w3af -v ~/w3af-shared:/root/w3af-shared andresriancho/w3af'


def start_container():
    '''
    Start a new w3af container so we can connect using SSH and run w3af

    :return: The container id we just started
    '''
    try:
        container_id = subprocess.check_output(DOCKER_RUN, shell=True)
    except subprocess.CalledProcessError, cpe:
        print('w3af container failed to start: "%s"' % cpe)
        sys.exit(1)
    else:
        # Let the container start the ssh daemon
        time.sleep(1)
        return container_id.strip()


def stop_container(container_id):
    '''
    Stop a running w3af container
    '''
    try:
        container_id = subprocess.check_output('docker stop %s' % container_id, shell=True)
    except subprocess.CalledProcessError, cpe:
        print('w3af container failed to stop: "%s"' % cpe)
        sys.exit(1)


def create_volumes():
    '''
    Create the directories if they don't exist
    '''
    w3af_home = os.path.expanduser('~/.w3af')
    w3af_shared = os.path.expanduser('~/w3af-shared')

    if not os.path.exists(w3af_home):
        os.mkdir(w3af_home)

    if not os.path.exists(w3af_shared):
        os.mkdir(w3af_shared)


def connect_to_container(container_id, cmd):
    '''
    Connect to a running container, start one if not running.
    '''
    try:
        cont_data = subprocess.check_output('docker inspect %s' % container_id, shell=True)
    except subprocess.CalledProcessError:
        print('Failed to inspect container with id %s' % container_id)
        sys.exit(1)

    try:
        ip_address = json.loads(cont_data)[0]['NetworkSettings']['IPAddress']
    except:
        print('Invalid JSON output from inspect command')
        sys.exit(1)

    ssh_key = os.path.join(ROOT_PATH, 'w3af-docker.prv')

    subprocess.call(['ssh', '-i', ssh_key, '-t', '-t',
                     '-oStrictHostKeyChecking=no',
                     'root@' + ip_address,
                     cmd])


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', help='Use bash to connect',
                        action='store_true')
    args = parser.parse_args()
    return args


if __name__ == '__main__':
    # if not root...kick out
    if not os.geteuid() == 0:
        sys.exit('Only root can run this script')

    args = parse_args()
    create_volumes()
    container_id = start_container()

    if args.debug:
        cmd = '/bin/bash'
    else:
        cmd = '/home/w3af/w3af/w3af_console'

    try:
        connect_to_container(container_id, cmd)
    finally:
        stop_container(container_id)
